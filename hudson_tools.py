#!/usr/bin/env python

# Build script invoked by our Hudson build server to perform our continuous integration builds.
#
# Fetches dependencies from a network share, then configures, builds and tests ohwidget.
#
# Run with --help to list arguments.
#
# You can run this on a developer machine, but you may need to help the script find the
# network share by using the -a argument.

import subprocess
import sys
import os
import platform
import shutil
from hudson_helpers import (
        get_vsvars_environment,
        default_platform,
        delete_directory,
        BuildBehaviour)
from dependencies import (
        fetch_dependencies)
import threading
import optparse
import glob

# Mapping from Hudson slave group labels to platform names.
platforms_for_slaves = {
        "windows-x86" : "Windows-x86",
        "linux-x86" : "Linux-x86",
        "linux-x64" : "Linux-x64",
        "arm" : "Linux-ARM",
        None : default_platform()
        }

def parse_command_line(argv=None):
    if argv is None:
        argv = sys.argv
    parser = optparse.OptionParser()
    parser.add_option(
            "-p", "--publish-revno",
            dest="publishrevno",
            action="store_true",
            default=False,
            help="Publish the current revision number to a network share.")
    parser.add_option(
            "-t", "--target",
            dest="target",
            default=None,
            help="Target platform. One of {%s}." % (", ".join(build_behaviours.keys())))
    parser.add_option(
            "-a", "--artifacts",
            dest="artifacts",
            default=None,
            help="Build artifacts directory. Used to fetch dependencies. Default depends on target platform.")
    return parser.parse_args(argv)

def windows_prebuild(env):
    # Connect to the network share.
    sys.stdout.write("Connecting to network share...\n")
    sys.stdout.flush()
    subprocess.check_call(["net", "use", "\\\\ohnet.linn.co.uk\\artifacts"])
    # Use vsvars32.bat to add Visual Studio settings to environment.
    env.update(get_vsvars_environment())


# Hudson expects to find test results in the workspace root, so here we copy them out of
# the build directory. (Except on ARM, where we haven't run any tests locally and so don't
# have any test results and have to provide Hudson with some dummy results to placate it.)

def copy_javascript_test_results_to_current_directory(env):
    builddir = env['BUILDDIR']
    testglob = os.path.join(builddir, '*test.xml')
    filepaths = glob.glob(testglob)
    for filepath in filepaths:
        dirpath, filename = os.path.split(filepath)
        if filename=="UnitTests.test.xml":
            continue
        shutil.copyfile(filepath, filename)

def fabricate_test_results():
    dummyfile = open("dummy_test_results.test.xml", "w")
    dummyfile.write('<?xml version="1.0" encoding="UTF-8"?><testsuite errors="0" failures="0" name="dummy" tests="0"><testcase classname="autogenerated" name="autogenerated" time="0"></testcase></testsuite>\n')
    dummyfile.close()

def windows_postbuild(env):
    copy_javascript_test_results_to_current_directory(env)

def non_windows_postbuild(env):
    fabricate_test_results()


# We don't build on an ARM device, so we need some extra steps to transfer the build results
# onto one to run the tests there.

def invoke_ssh_command(ssh, cmd):
    stdin, stdout, stderr = ssh.exec_command(cmd)
    def pump_output_thread(source, destination):
        for line in source:
            destination.write(line)
            destination.flush()
    stdout_thread = threading.Thread(target=pump_output_thread, args=(stdout, sys.stdout))
    stderr_thread = threading.Thread(target=pump_output_thread, args=(stderr, sys.stderr))
    stdout_thread.start()
    stderr_thread.start()
    stdout_thread.join()
    stderr_thread.join()
    return stdout.channel.recv_exit_status()

def run_tests_on_sheeva(env):
    host = "sheeva010.linn.co.uk"
    username = "root"
    import paramiko
    
    rsyncCmd = [
        "rsync",
        "-avz",
        "--delete", 
        "--exclude='*.o'", 
        "--exclude='*.a'", 
        "--exclude='Include'", 
        "buildhudson/", 
        username+"@"+host+":~/smartiesbuild"]
    subprocess.check_call(rsyncCmd)
    rsyncCmd = [
        "rsync",
        "-avz", 
        "--delete", 
        "--exclude='*.o'", 
        "--exclude='*.a'", 
        "--exclude='Include'", 
        "dependencies/Linux-ARM/NUnit-2.5.9.10305-net4.0/", 
        username+"@"+host+":~/smartiesbuild/NUnit"]
    subprocess.check_call(rsyncCmd)
    rsyncCmd = [
        "rsync",
        "-avz", 
        "--delete", 
        "--exclude='*.o'", 
        "--exclude='*.a'", 
        "--exclude='Include'", 
        "scripts/remote_wrapper.py", 
        username+"@"+host+":~/smartiesbuild/scripts/"]


    subprocess.check_call(rsyncCmd)
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(host, username=username, look_for_keys='True')
    invoke_ssh_command(ssh, "ls -l ~/smartiesbuild")
    invoke_ssh_command(ssh, "ls -l ~/smartiesbuild/NUnit")
    exit_status = invoke_ssh_command(ssh,
            "python ~/smartiesbuild/scripts/remote_wrapper.py 'LD_LIBRARY_PATH=~/smartiesbuild mono --debug ~/smartiesbuild/NUnit/bin/net-2.0/nunit-console.exe --labels --noshadow ~/smartiesbuild/*.Tests.dll'")
    ssh.close()
    if exit_status != 0:
        raise Exception("Tests failed on Sheeva node with exit status '%s'" % exit_status)

# Behaviour for the build when building for each platform.
build_behaviours = {

        "Windows-x86" : BuildBehaviour(
            prebuild = windows_prebuild,
            postbuild = windows_postbuild,
            dependencies_to_copy = ["ohnet", "nunit", "ndesk-options", "moq", "yui-compressor", "selenium", "zwave", "mono-addins", "log4net"],
            run_configure = True,
            env = dict(
                PLATFORM='Windows-x86',
                OHNET_ARTIFACTS='\\\\ohnet.linn.co.uk\\artifacts',
                BUILDDIR='buildhudson',
                WAFLOCK='.lock-wafbuildhudson',
                OPENHOME_NO_ERROR_DIALOGS='1',
                OHNET_NO_ERROR_DIALOGS='1')),

        "Windows-x64" : BuildBehaviour(
            prebuild = windows_prebuild,
            postbuild = windows_postbuild,
            dependencies_to_copy = ["ohnet", "nunit", "ndesk-options", "moq", "yui-compressor", "selenium", "zwave", "mono-addins", "log4net"],
            run_configure = True,
            env = dict(
                PLATFORM='Windows-x64',
                OHNET_ARTIFACTS='\\\\ohnet.linn.co.uk\\artifacts',
                BUILDDIR='buildhudson64',
                WAFLOCK='.lock-wafbuildhudson64',
                OPENHOME_NO_ERROR_DIALOGS='1',
                OHNET_NO_ERROR_DIALOGS='1')),

        "Linux-x86" : BuildBehaviour(
            postbuild = non_windows_postbuild,
            dependencies_to_copy = ["ohnet", "nunit", "ndesk-options", "moq", "yui-compressor", "selenium", "zwave", "mono-addins", "log4net"],
            run_configure = True,
            extra_configure_args = ["--with-csc-binary", "/usr/bin/gmcs"],
            env = dict(
                PLATFORM='Linux-x86',
                OHNET_ARTIFACTS='/opt/artifacts',
                BUILDDIR='buildhudson',
                WAFLOCK='.lock-wafbuildhudson')),

        "Linux-x64" : BuildBehaviour(
            postbuild = non_windows_postbuild,
            dependencies_to_copy = ["ohnet", "nunit", "ndesk-options", "moq", "yui-compressor", "selenium", "zwave", "mono-addins", "log4net"],
            run_configure = True,
            extra_configure_args = ["--with-csc-binary", "/usr/bin/gmcs"],
            env = dict(
                PLATFORM='Linux-x64',
                OHNET_ARTIFACTS='/opt/artifacts',
                BUILDDIR='buildhudson64',
                WAFLOCK='.lock-wafbuildhudson64')),

        "Linux-ARM" : BuildBehaviour(
            postbuild = non_windows_postbuild,
            dependencies_to_copy = ["ohnet", "nunit", "ndesk-options", "moq", "yui-compressor", "selenium", "zwave", "mono-addins", "log4net"],
            run_configure = True,
            extra_configure_args = ["--with-csc-binary", "/usr/bin/gmcs", "--platform", "Linux-ARM"],
            custom_test_func = run_tests_on_sheeva,
            env = dict(
                PLATFORM='Linux-ARM',
                OHNET_ARTIFACTS='/opt/artifacts',
                BUILDDIR='buildhudson',
                WAFLOCK='.lock-wafbuildhudson')),

        }

class HudsonBuild(object):
    def __init__(self):
        self.options, self.args = parse_command_line()

        if self.options.target is not None:
            platform = self.platform = self.options.target
        else:
            platform = self.platform = get_default_platform()
        behaviour = self.behaviour = build_behaviours[platform]

        env = self.env = dict(os.environ)
        env.update(behaviour.env)

        if self.options.artifacts is not None:
            env['OHNET_ARTIFACTS'] = self.options.artifacts

        configure_args = self.configure_args = []
        configure_args.extend(behaviour.extra_configure_args)

    def prebuild(self):
        self.behaviour.prebuild(self.env)
    
    def postbuild(self):
        self.behaviour.postbuild(self.env)

    def writeenv(self):
        artifacts = self.env['OHNET_ARTIFACTS']
        artifacts = os.path.join(artifacts, 'smarties-revision.txt')
        f = open(artifacts, 'w')
        output = subprocess.check_call('git rev-parse HEAD', stdout=f, shell=True)
        f.close()
    
    def copy_dependencies(self):
        # Wipe the dependencies directory:
        if self.behaviour.wipe_dependencies:
            delete_directory(os.path.join('dependencies', self.platform), logfile=sys.stdout)

        # Fetch our dependencies according to 'dependencies.txt'.
        if len(self.behaviour.dependencies_to_copy) > 0:
            return self.configure_args + fetch_dependencies("projectdata/dependencies.txt", self.behaviour.dependencies_to_copy, self.env, logfile=sys.stdout)
        else:
            return self.configure_args

    def configure(self, configure_args):
        if self.behaviour.should_run_configure:
            sys.stdout.write('\nConfigure...\n')
            sys.stdout.flush()
            subprocess.check_call([sys.executable, "waf", "configure"] + configure_args, env=self.env)

    def build(self):
        sys.stdout.write('\nBuild...\n')
        sys.stdout.flush()
        subprocess.check_call([sys.executable, "waf", "clean", "build"], env=self.env)

    def test(self):
        sys.stdout.write('\nTest...\n')
        sys.stdout.flush()
        if self.behaviour.custom_test_func is not None:
            self.behaviour.custom_test_func(self.env)
        else:
            subprocess.check_call([sys.executable, "waf", "test"], env=self.env)
            subprocess.check_call([sys.executable, "waf", "integrationtest"], env=self.env)

    def stresstest(self):
        sys.stdout.write('\nStress test...\n')
        sys.stdout.flush()
        subprocess.check_call([sys.executable, "waf", "stresstest"], env=self.env)

    def run(self):
        self.prebuild()
        configure_args = self.copy_dependencies()
        self.configure(configure_args)
        if self.options.publishrevno:
            self.writeenv()
        self.build()
        self.test()
        self.postbuild()

def get_default_platform():
    slave = os.environ.get("slave", None) 
    return platforms_for_slaves[slave]

def hudson_build():
    builder = HudsonBuild()
    builder.run()

if __name__ == "__main__":
    hudson_build()
